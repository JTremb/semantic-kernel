# Copyright (c) Microsoft. All rights reserved.

from logging import Logger
from typing import Optional, Tuple

from semantic_kernel.orchestration.context_variables import ContextVariables
from semantic_kernel.template_engine.blocks.block import Block
from semantic_kernel.template_engine.blocks.block_types import BlockTypes
from semantic_kernel.template_engine.blocks.symbols import Symbols
from semantic_kernel.template_engine.protocols.text_renderer import TextRenderer


class GuidanceBlock(Block, TextRenderer):
    def __init__(self, content: Optional[str] = None, log: Optional[Logger] = None):
        super().__init__(content=content and content.strip(), log=log)

    @property
    def type(self) -> BlockTypes:
        return BlockTypes.GUIDANCE

    def is_valid(self) -> Tuple[bool, str]:
        if not self.content:
            error_msg = "A Guidance block cannot be empty"
            self.log.error(error_msg)
            return False, error_msg

        return True, ""

    def render(self, context: Optional[ContextVariables] = None) -> str:
        # Guidance blocks are rendered/generated by guidance engine

        # Adding the format symbols delimiters
        start = Symbols.BLOCK_STARTER + Symbols.BLOCK_STARTER
        end = Symbols.BLOCK_ENDER + Symbols.BLOCK_ENDER

        # '%' is a special char to indicate that the content is a guidance variable
        # This is used so SK template engine doesn't try to render it
        if self.content.startswith(Symbols.GUIDANCE_BLOCK_HB_VAR):
            return f"{start}{self.content[1:]}{end}"

        return f"{start}{self.content}{end}"
